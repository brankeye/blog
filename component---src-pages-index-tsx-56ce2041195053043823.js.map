{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./src/utils/typography.tsx","webpack:///./src/components/Layout.tsx","webpack:///./src/components/Anchor.tsx","webpack:///./src/components/index.tsx"],"names":["__webpack_require__","r","__webpack_exports__","d","indexPageQuery","react__WEBPACK_IMPORTED_MODULE_0__","gatsby__WEBPACK_IMPORTED_MODULE_1__","emotion__WEBPACK_IMPORTED_MODULE_2__","_components__WEBPACK_IMPORTED_MODULE_3__","ramda__WEBPACK_IMPORTED_MODULE_4__","injectGlobal","html","width","margin","body","getSiteMetadataProp","curry","propName","input","path","getTitle","getAuthor","getTwitter","getPosts","pipe","filter","post","node","frontmatter","title","length","getPostTitle","getPostSlug","props","author","twitter","direction","href","noUnderline","map","postTitle","slug","key","to","color","border","size","githubTheme","overrideThemeStyles","_ref","options","rhythm","backgroundColor","h1","borderBottom","h2","h6","a","textDecoration","b","blockquote","borderLeft","typography","Typography","Layout","scale","styled","target","display","flex","marginLeft","marginRight","maxWidth","padding","flexDirection","justifyContent","alignItems","Anchor","fontWeight","bold","components_Layout","components_Anchor"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,mCAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAA,IAAAO,EAAAP,EAAA,IAAAQ,EAAAR,EAAA,KAAAS,EAAAT,EAAA,KAOAU,uBAAa,CACXC,KAAM,CACJC,MAAO,OACPC,OAAQ,GAEVC,KAAM,CACJF,MAAO,OACPC,OAAQ,KAmBZ,IAAME,EAAsBC,YAAM,SAACC,EAAUC,GAAX,OAChCC,YAAK,CAAC,OAAQ,OAAQ,eAAgBF,GAAWC,KAE7CE,EAAWL,EAAoB,SAC/BM,EAAYN,EAAoB,UAChCO,EAAaP,EAAoB,WACjCQ,EAAWC,YACfL,YAAK,CAAC,OAAQ,oBAAqB,UACnCM,YAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,YAAYC,MAAMC,OAAS,KAEhDC,EAAeZ,YAAK,CAAC,OAAQ,cAAe,UAC5Ca,EAAcb,YAAK,CAAC,OAAQ,SAAU,SAE5CjB,EAAA,iBAAgB+B,GACd,IAAMJ,EAAQT,EAASa,GACjBC,EAASb,EAAUY,GACnBE,EAAUb,EAAWW,GAC3B,OACE5B,EAAA,cAACG,EAAA,EAAD,CAAQ4B,UAAU,UAChB/B,EAAA,wBAAKwB,GACLxB,EAAA,yCACiBA,EAAA,uBAAI6B,GADrB,8DAEmB,IACjB7B,EAAA,iCACU,IACRA,EAAA,cAACG,EAAA,EAAD,CAAQ6B,KAAMF,EAASG,aAAW,GAAlC,0BAEU,IAJZ,mBAQDC,YAAI,SAAAb,GACH,IAAMc,EAAYT,EAAaL,GACzBe,EAAOT,EAAYN,GACzB,OACErB,EAAA,cAACC,EAAA,KAAD,CAAMoC,IAAKD,EAAME,GAAIF,GAClBD,IAGJjB,EAASU,MAKX,IAAM7B,EAAc,gGCzErBwC,EAAQ,yBAGRC,EAAS,SAAAC,GAAI,OAAOA,EAAP,oCAEnBC,IAAYC,oBAAsB,SAAAC,EAAaC,GAAbD,EAAGE,OAAH,MAA0B,CAC1DrC,KAAM,CACJsC,gBARoB,sBASpBR,SAEFS,GAAI,CACFC,aAAcT,EAAO,IAEvBU,GAAI,CACFD,aAAcT,EAAO,IAEvBW,GAAI,CACFZ,SAEFa,EAAG,CACDb,MAlBc,4BAmBdc,eAAgB,QAElBC,EAAG,CACDf,MAvBkB,2BAyBpBgB,WAAY,CACVhB,QACAiB,WAAYhB,EAAO,MAIvB,IAAMiB,EAAa,IAAIC,IAAWhB,KAGrBI,EAASW,EAAWX,OCflBa,GDgBMF,EAAWG,MChCjBC,YAAO,MAAV,CAAAC,OAAA,aAAGD,CACb,CACEE,QAAS,OACTC,KAAM,EACNC,WAAY,OACZC,YAAa,OACbC,SAAUrB,EAAO,IACjBsB,QAAYtB,EAAO,KAAZ,IAAoBA,EAAO,MAEpC,SAAAF,GAAA,MAAgD,CAC9CyB,cADFzB,EAAGb,UAEDuC,eAFF1B,EAAc0B,eAGZC,WAHF3B,EAA8B2B,eCJjBC,UALAX,YAAO,IAAV,CAAAC,OAAA,YAAGD,CAAY,SAAAjB,GAAA,MAA4B,CACrD6B,WADyB7B,EAAG8B,KACT,OAAS,SAC5BrB,eAFyBT,EAASX,YAEJ,OAAS,gBCVzCtC,EAAAG,EAAAD,EAAA,sBAAA8E,IAAAhF,EAAAG,EAAAD,EAAA,sBAAA+E","file":"component---src-pages-index-tsx-56ce2041195053043823.js","sourcesContent":["import * as React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { Link } from \"gatsby\";\nimport { injectGlobal } from \"emotion\";\nimport { Layout, Anchor } from \"../components\";\nimport { pipe, path, filter, map, curry } from \"ramda\";\n\ninjectGlobal({\n  html: {\n    width: \"100%\",\n    margin: 0\n  },\n  body: {\n    width: \"100%\",\n    margin: 0\n  }\n});\n\ninterface Props {\n  data: {\n    site: {\n      siteMetadata: {\n        title: string;\n        author: string;\n        twitter: string;\n      };\n    };\n    allMarkdownRemark: {\n      edges: Array<Object>;\n    };\n  };\n}\n\nconst getSiteMetadataProp = curry((propName, input) =>\n  path([\"data\", \"site\", \"siteMetadata\", propName], input)\n);\nconst getTitle = getSiteMetadataProp(\"title\");\nconst getAuthor = getSiteMetadataProp(\"author\");\nconst getTwitter = getSiteMetadataProp(\"twitter\");\nconst getPosts = pipe(\n  path([\"data\", \"allMarkdownRemark\", \"edges\"]),\n  filter(post => post.node.frontmatter.title.length > 0)\n);\nconst getPostTitle = path([\"node\", \"frontmatter\", \"title\"]);\nconst getPostSlug = path([\"node\", \"fields\", \"slug\"]);\n\nexport default (props: Props) => {\n  const title = getTitle(props);\n  const author = getAuthor(props);\n  const twitter = getTwitter(props);\n  return (\n    <Layout direction=\"column\">\n      <h1>{title}</h1>\n      <p>\n        A tech blog by <b>{author}</b> in which he neither publishes nightly nor\n        plays the bugle.{\" \"}\n        <p>\n          You can{\" \"}\n          <Anchor href={twitter} noUnderline>\n            yell at him on Twitter\n          </Anchor>{\" \"}\n          if you'd like.\n        </p>\n      </p>\n      {map(post => {\n        const postTitle = getPostTitle(post);\n        const slug = getPostSlug(post);\n        return (\n          <Link key={slug} to={slug}>\n            {postTitle}\n          </Link>\n        );\n      }, getPosts(props))}\n    </Layout>\n  );\n};\n\nexport const indexPageQuery = graphql`\n  query IndexPageQuery {\n    site {\n      siteMetadata {\n        title\n        author\n        twitter\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"DD MMMM, YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n","import Typography from \"typography\";\nimport githubTheme from \"typography-theme-github\";\n\nconst backgroundColor = \"hsla(0, 0%, 18%, 1)\";\nconst color = \"hsla(0, 0%, 95%, 0.95)\";\nconst brighterColor = \"hsla(0, 0%, 100%, 0.95)\";\nconst linkColor = \"hsla(195, 90%, 60%, 0.95)\";\nconst border = size => `${size}px solid ${brighterColor}`;\n\ngithubTheme.overrideThemeStyles = ({ rhythm }, options) => ({\n  body: {\n    backgroundColor,\n    color\n  },\n  h1: {\n    borderBottom: border(1)\n  },\n  h2: {\n    borderBottom: border(1)\n  },\n  h6: {\n    color\n  },\n  a: {\n    color: linkColor,\n    textDecoration: \"none\"\n  },\n  b: {\n    color: brighterColor\n  },\n  blockquote: {\n    color,\n    borderLeft: border(4)\n  }\n});\n\nconst typography = new Typography(githubTheme);\n\nexport default typography;\nexport const rhythm = typography.rhythm;\nexport const scale = typography.scale;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils/typography\";\n\ninterface Props {\n  children: any;\n}\n\nconst Layout = styled(\"div\")(\n  {\n    display: \"flex\",\n    flex: 1,\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    maxWidth: rhythm(30),\n    padding: `${rhythm(1.5)} ${rhythm(0.75)}`\n  },\n  ({ direction, justifyContent, alignItems }) => ({\n    flexDirection: direction,\n    justifyContent,\n    alignItems\n  })\n);\n\nexport default Layout;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils/typography\";\n\ninterface Props {\n  children: any;\n}\n\nconst Anchor = styled(\"a\")(({ bold, noUnderline }) => ({\n  fontWeight: bold ? \"bold\" : \"normal\",\n  textDecoration: noUnderline ? \"none\" : \"underline\"\n}));\n\nexport default Anchor;\n","export { default as Layout } from \"./Layout\";\nexport { default as Anchor } from \"./Anchor\";\n"],"sourceRoot":""}