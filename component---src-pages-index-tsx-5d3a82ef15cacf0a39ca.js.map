{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./src/utils/selectors/index.tsx","webpack:///./src/utils/theme.tsx","webpack:///./src/utils/typography.tsx","webpack:///./src/components/Layout.tsx","webpack:///./src/components/Anchor.tsx","webpack:///./src/components/Header.tsx","webpack:///./src/components/Title.tsx","webpack:///./src/components/Divider.tsx","webpack:///./src/components/Description.tsx","webpack:///./src/components/index.tsx"],"names":["injectGlobal","html","width","margin","body","display","flexDirection","flex","__webpack_exports__","props","title","getTitle","author","getAuthor","twitter","getTwitter","react__WEBPACK_IMPORTED_MODULE_1__","_components__WEBPACK_IMPORTED_MODULE_3__","direction","className","Object","emotion__WEBPACK_IMPORTED_MODULE_0__","_ref","map","post","postTitle","getPostTitle","postDate","getPostDate","toUpperCase","slug","getPostSlug","key","_ref2","_ref3","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","getPosts","indexPageQuery","__webpack_require__","d","ramda__WEBPACK_IMPORTED_MODULE_0__","getSiteMetadataProp","curry","propName","input","path","color","brighterColor","getBorder","size","borderLight","border","borderHeavy","breakpoints","xs","sm","md","lg","getMediaQuery","bp","githubTheme","overrideThemeStyles","options","rhythm","backgroundColor","h1","borderBottom","h2","h6","a","textDecoration","b","strong","hr","blockquote","borderLeft","typography","Typography","Layout","scale","styled","target","marginLeft","marginRight","maxWidth","padding","justifyContent","alignItems","Anchor","fontWeight","bold","noUnderline","Header","letterSpacing","textTransform","Title","Divider","marginTop","marginBottom","height","borderColor","defaultProps","Description","react","components_Anchor","href","components_Layout","components_Header","components_Title","components_Divider","components_Description"],"mappings":"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","file":"component---src-pages-index-tsx-5d3a82ef15cacf0a39ca.js","sourcesContent":["import * as React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { Link } from \"gatsby\";\nimport { injectGlobal } from \"emotion\";\nimport { Layout, Anchor, Header, Description } from \"../components\";\nimport {\n  getTitle,\n  getAuthor,\n  getTwitter,\n  getPosts,\n  getPostTitle,\n  getPostDate,\n  getPostSlug\n} from \"../utils/selectors\";\nimport { map } from \"ramda\";\n\ninjectGlobal({\n  html: {\n    width: \"100%\",\n    margin: 0\n  },\n  body: {\n    width: \"100%\",\n    margin: 0\n  }\n});\n\ninterface Props {\n  data: {\n    site: {\n      siteMetadata: {\n        title: string;\n        author: string;\n        twitter: string;\n      };\n    };\n    allMarkdownRemark: {\n      edges: Array<Object>;\n    };\n  };\n}\n\nexport default (props: Props) => {\n  const title = getTitle(props);\n  const author = getAuthor(props);\n  const twitter = getTwitter(props);\n  return (\n    <Layout direction=\"column\">\n      <Header>{title}!</Header>\n      <Description author={author} twitter={twitter} />\n      <div css={{ display: \"flex\", flexDirection: \"column\" }}>\n        {map(post => {\n          const postTitle = getPostTitle(post);\n          const postDate = getPostDate(post).toUpperCase();\n          const slug = getPostSlug(post);\n          return (\n            <div key={slug} css={{ display: \"flex\" }}>\n              <div\n                css={{\n                  display: \"flex\",\n                  flex: 0.28\n                }}\n              >\n                {postDate}\n              </div>\n              <Link to={slug}>{postTitle}</Link>\n            </div>\n          );\n        }, getPosts(props))}\n      </div>\n    </Layout>\n  );\n};\n\nexport const indexPageQuery = graphql`\n  query IndexPageQuery {\n    site {\n      siteMetadata {\n        title\n        author\n        twitter\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"DD MMM YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n","import { prop, path, filter, map, curry, groupBy } from \"ramda\";\nimport { getMonth, getYear } from \"date-fns\";\n\nexport const getSiteMetadataProp = curry((propName, input) =>\n  path([\"data\", \"site\", \"siteMetadata\", propName], input)\n);\nexport const getTitle = getSiteMetadataProp(\"title\");\nexport const getAuthor = getSiteMetadataProp(\"author\");\nexport const getTwitter = getSiteMetadataProp(\"twitter\");\nexport const getPosts = path([\"data\", \"allMarkdownRemark\", \"edges\"]);\nexport const getPostTitle = path([\"node\", \"frontmatter\", \"title\"]);\nexport const getPostDate = path([\"node\", \"frontmatter\", \"date\"]);\nexport const getPostSlug = path([\"node\", \"fields\", \"slug\"]);\n","export const backgroundColor = \"hsla(0, 0%, 18%, 1)\";\nexport const color = \"hsla(0, 0%, 95%, 0.95)\";\nexport const brighterColor = \"hsla(0, 0%, 100%, 0.95)\";\nexport const linkColor = \"hsla(195, 90%, 60%, 0.95)\";\n\nconst getBorder = size => `${size}px solid ${brighterColor}`;\nexport const borderLight = getBorder(1);\nexport const border = getBorder(2);\nexport const borderHeavy = getBorder(3);\n\ninterface Breakpoints {\n  xs: number;\n  sm: number;\n  md: number;\n  lg: number;\n}\n\nconst breakpoints: Breakpoints = {\n  xs: 576,\n  sm: 768,\n  md: 992,\n  lg: 1200\n};\n\nexport const getMediaQuery = bp => `@media (min-width: ${breakpoints[bp]}px)`;\n\nexport const mq = {\n  xs: getMediaQuery(\"xs\"),\n  sm: getMediaQuery(\"sm\"),\n  md: getMediaQuery(\"md\"),\n  lg: getMediaQuery(\"lg\")\n};\n","import Typography from \"typography\";\nimport githubTheme from \"typography-theme-github\";\nimport {\n  backgroundColor,\n  color,\n  brighterColor,\n  linkColor,\n  border,\n  borderLight,\n  borderHeavy\n} from \"./theme\";\n\ngithubTheme.overrideThemeStyles = ({ rhythm }, options) => ({\n  body: {\n    backgroundColor,\n    color\n  },\n  h1: {\n    color,\n    borderBottom: \"none\"\n  },\n  h2: {\n    color,\n    borderBottom: borderLight\n  },\n  h6: {\n    color\n  },\n  a: {\n    color: linkColor,\n    textDecoration: \"none\"\n  },\n  b: {\n    color: brighterColor\n  },\n  strong: {\n    color: brighterColor\n  },\n  hr: {\n    color: brighterColor\n  },\n  blockquote: {\n    color,\n    borderLeft: borderHeavy\n  }\n});\n\nconst typography = new Typography(githubTheme);\n\nexport default typography;\nexport const rhythm = typography.rhythm;\nexport const scale = typography.scale;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils/typography\";\n\ninterface Props {\n  children: any;\n}\n\nconst Layout = styled(\"div\")(\n  {\n    display: \"flex\",\n    flex: 1,\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    maxWidth: rhythm(30),\n    padding: `${rhythm(1.5)} ${rhythm(0.75)}`\n  },\n  ({ direction, justifyContent, alignItems }) => ({\n    flexDirection: direction,\n    justifyContent,\n    alignItems\n  })\n);\n\nexport default Layout;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils/typography\";\n\ninterface Props {\n  children: any;\n}\n\nconst Anchor = styled(\"a\")(({ bold, noUnderline }) => ({\n  fontWeight: bold ? \"bold\" : \"normal\",\n  textDecoration: noUnderline ? \"none\" : \"underline\"\n}));\n\nexport default Anchor;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils/typography\";\nimport { mq } from \"../utils/theme\";\n\nconst Header = styled(\"h1\")({\n  letterSpacing: 5,\n  textTransform: \"uppercase\",\n  borderBottom: \"none\"\n});\n\nexport default Header;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils/typography\";\nimport { border } from \"../utils/theme\";\n\ninterface Props {\n  children: any;\n}\n\nconst Title = styled(\"h1\")({\n  borderBottom: border\n});\n\nexport default Title;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils\";\nimport { brighterColor } from \"../utils/theme\";\n\nconst Divider = styled(\"hr\")(\n  {\n    marginTop: rhythm(1),\n    marginBottom: rhythm(1)\n  },\n  ({ height }) => ({\n    backgroundColor: brighterColor,\n    borderColor: brighterColor,\n    height\n  })\n);\n\nDivider.defaultProps = {\n  height: 4\n};\n\nexport default Divider;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils/typography\";\nimport Anchor from \"./Anchor\";\n\ninterface Props {\n  author: string;\n  twitter: string;\n}\n\nconst Description = ({ author, twitter }: Props) => (\n  <p>\n    A tech blog by <strong>{author}</strong> in which he neither publishes\n    nightly nor plays the bugle. <br />\n    You can{\" \"}\n    <Anchor href={twitter} noUnderline>\n      yell at him on Twitter\n    </Anchor>{\" \"}\n    if you'd like.\n  </p>\n);\n\nexport default Description;\n","export { default as Layout } from \"./Layout\";\nexport { default as Anchor } from \"./Anchor\";\nexport { default as Header } from \"./Header\";\nexport { default as Title } from \"./Title\";\nexport { default as Divider } from \"./Divider\";\nexport { default as Description } from \"./Description\";\n"],"sourceRoot":""}