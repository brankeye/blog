{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./src/utils/selectors/index.tsx","webpack:///./src/utils/theme.tsx","webpack:///./src/utils/typography.tsx","webpack:///./src/components/Layout.tsx","webpack:///./src/components/Anchor.tsx","webpack:///./src/components/Header.tsx","webpack:///./src/components/Title.tsx","webpack:///./src/components/Divider.tsx","webpack:///./src/components/Description.tsx","webpack:///./src/components/Column.tsx","webpack:///./src/components/Post.tsx","webpack:///./src/components/PostList.tsx","webpack:///./src/components/index.tsx"],"names":["__webpack_require__","r","__webpack_exports__","d","indexPageQuery","react__WEBPACK_IMPORTED_MODULE_0__","_components__WEBPACK_IMPORTED_MODULE_1__","_utils_selectors__WEBPACK_IMPORTED_MODULE_2__","props","title","getTitle","author","getAuthor","twitter","getTwitter","posts","getPosts","direction","ramda__WEBPACK_IMPORTED_MODULE_0__","getSiteMetadataProp","curry","propName","input","path","pipe","filter","post","getPostDraft","map","getPostTitle","date","getPostDate","toUpperCase","slug","getPostSlug","frontmatterProp","Boolean","color","brighterColor","getBorder","size","borderLight","border","borderHeavy","breakpoints","xs","sm","md","lg","getMediaQuery","bp","githubTheme","overrideThemeStyles","_ref","options","rhythm","body","backgroundColor","h1","borderBottom","h2","h6","a","textDecoration","b","strong","hr","blockquote","borderLeft","typography","Typography","Layout","scale","styled","target","display","flex","marginLeft","marginRight","maxWidth","padding","flexDirection","justifyContent","alignItems","Anchor","fontWeight","bold","noUnderline","Header","fontSize","letterSpacing","textTransform","Title","marginTop","Divider","marginBottom","height","borderColor","defaultProps","Description","react","components_Anchor","href","Column","PostDate","Post","components_Column","gatsby_browser_entry","to","PostList","components_Post","key","components_Layout","components_Header","components_Title","components_Divider","components_Description","components_PostList"],"mappings":"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","file":"component---src-pages-index-tsx-e384411f8d31d8e8d0dc.js","sourcesContent":["import * as React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { Link } from \"gatsby\";\nimport { Layout, Header, Description, PostList } from \"../components\";\nimport { getTitle, getAuthor, getTwitter, getPosts } from \"../utils/selectors\";\n\ninterface Props {\n  data: {\n    site: {\n      siteMetadata: {\n        title: string;\n        author: string;\n        twitter: string;\n      };\n    };\n    allMarkdownRemark: {\n      edges: Array<Object>;\n    };\n  };\n}\n\nexport default (props: Props) => {\n  const title = getTitle(props);\n  const author = getAuthor(props);\n  const twitter = getTwitter(props);\n  const posts = getPosts(props);\n  return (\n    <Layout direction=\"column\">\n      <Header>{title}</Header>\n      <Description author={author} twitter={twitter} />\n      <PostList posts={posts} />\n    </Layout>\n  );\n};\n\nexport const indexPageQuery = graphql`\n  query IndexPageQuery {\n    site {\n      siteMetadata {\n        title\n        author\n        twitter\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"DD MMM YYYY\")\n            title\n            draft\n          }\n        }\n      }\n    }\n  }\n`;\n","import { pipe, prop, path, filter, map, curry } from \"ramda\";\nimport { getMonth, getYear } from \"date-fns\";\n\nexport const getSiteMetadataProp = curry((propName, input) =>\n  path([\"data\", \"site\", \"siteMetadata\", propName], input)\n);\nexport const getTitle = getSiteMetadataProp(\"title\");\nexport const getAuthor = getSiteMetadataProp(\"author\");\nexport const getTwitter = getSiteMetadataProp(\"twitter\");\nexport const getPosts = pipe(\n  path([\"data\", \"allMarkdownRemark\", \"edges\"]),\n  filter(post => {\n    const draft = getPostDraft(post);\n    return !draft;\n  }),\n  map(post => ({\n    title: getPostTitle(post),\n    date: getPostDate(post).toUpperCase(),\n    slug: getPostSlug(post)\n  }))\n);\n\nconst frontmatterProp = propName => path([\"node\", \"frontmatter\", propName]);\nexport const getPostTitle = frontmatterProp(\"title\");\nexport const getPostDate = frontmatterProp(\"date\");\nexport const getPostDraft = pipe(\n  frontmatterProp(\"draft\"),\n  Boolean\n);\nexport const getPostSlug = path([\"node\", \"fields\", \"slug\"]);\n","export const backgroundColor = \"hsla(0, 0%, 18%, 1)\";\nexport const color = \"hsla(0, 0%, 95%, 0.95)\";\nexport const brighterColor = \"hsla(0, 0%, 100%, 0.95)\";\nexport const linkColor = \"hsla(195, 90%, 60%, 0.95)\";\n\nconst getBorder = size => `${size}px solid ${brighterColor}`;\nexport const borderLight = getBorder(1);\nexport const border = getBorder(2);\nexport const borderHeavy = getBorder(3);\n\ninterface Breakpoints {\n  xs: number;\n  sm: number;\n  md: number;\n  lg: number;\n}\n\nconst breakpoints: Breakpoints = {\n  xs: 576,\n  sm: 768,\n  md: 992,\n  lg: 1200\n};\n\nexport const getMediaQuery = bp => `@media (min-width: ${breakpoints[bp]}px)`;\n\nexport const mq = {\n  xs: getMediaQuery(\"xs\"),\n  sm: getMediaQuery(\"sm\"),\n  md: getMediaQuery(\"md\"),\n  lg: getMediaQuery(\"lg\")\n};\n","import Typography from \"typography\";\nimport githubTheme from \"typography-theme-github\";\nimport {\n  backgroundColor,\n  color,\n  brighterColor,\n  linkColor,\n  border,\n  borderLight,\n  borderHeavy\n} from \"./theme\";\n\ngithubTheme.overrideThemeStyles = ({ rhythm }, options) => ({\n  body: {\n    backgroundColor,\n    color\n  },\n  h1: {\n    color,\n    borderBottom: \"none\"\n  },\n  h2: {\n    color,\n    borderBottom: borderLight\n  },\n  h6: {\n    color\n  },\n  a: {\n    color: linkColor,\n    textDecoration: \"none\"\n  },\n  b: {\n    color: brighterColor\n  },\n  strong: {\n    color: brighterColor\n  },\n  hr: {\n    color: brighterColor\n  },\n  blockquote: {\n    color,\n    borderLeft: borderHeavy\n  }\n});\n\nconst typography = new Typography(githubTheme);\n\nexport default typography;\nexport const rhythm = typography.rhythm;\nexport const scale = typography.scale;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils/typography\";\n\ninterface Props {\n  children: any;\n}\n\nconst Layout = styled(\"div\")(\n  {\n    display: \"flex\",\n    flex: 1,\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    maxWidth: rhythm(30),\n    padding: `${rhythm(1.5)} ${rhythm(0.75)}`\n  },\n  ({ direction, justifyContent, alignItems }) => ({\n    flexDirection: direction,\n    justifyContent,\n    alignItems\n  })\n);\n\nexport default Layout;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils/typography\";\n\ninterface Props {\n  children: any;\n}\n\nconst Anchor = styled(\"a\")(({ bold, noUnderline }) => ({\n  fontWeight: bold ? \"bold\" : \"normal\",\n  textDecoration: noUnderline ? \"none\" : \"underline\"\n}));\n\nexport default Anchor;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils/typography\";\nimport { mq } from \"../utils/theme\";\n\nconst Header = styled(\"h1\")({\n  fontSize: 20,\n  letterSpacing: 3,\n  textTransform: \"uppercase\",\n  borderBottom: \"none\"\n});\n\nexport default Header;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils/typography\";\nimport { border } from \"../utils/theme\";\n\ninterface Props {\n  children: any;\n}\n\nconst Title = styled(\"h1\")({\n  fontSize: 16,\n  marginTop: 0,\n  borderBottom: border\n});\n\nexport default Title;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils\";\nimport { brighterColor } from \"../utils/theme\";\n\nconst Divider = styled(\"hr\")(\n  {\n    marginTop: rhythm(1),\n    marginBottom: rhythm(1)\n  },\n  ({ height }) => ({\n    backgroundColor: brighterColor,\n    borderColor: brighterColor,\n    height\n  })\n);\n\nDivider.defaultProps = {\n  height: 4\n};\n\nexport default Divider;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils/typography\";\nimport Anchor from \"./Anchor\";\n\ninterface Props {\n  author: string;\n  twitter: string;\n}\n\nconst Description = ({ author, twitter }: Props) => (\n  <p>\n    A tech blog by <strong>{author}</strong> in which he neither publishes\n    nightly nor plays the bugle. <br />\n    You can{\" \"}\n    <Anchor href={twitter} noUnderline>\n      yell at him on Twitter\n    </Anchor>{\" \"}\n    if you'd like.\n  </p>\n);\n\nexport default Description;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\n\nconst Column = styled(\"div\")({\n  display: \"flex\",\n  flexDirection: \"column\"\n});\n\nexport default Column;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { Link } from \"gatsby\";\nimport Column from './Column';\n\ninterface Props {\n  post: {\n    title: string;\n    date: string;\n    slug: string;\n  };\n}\n\nconst Post = ({ post }: Props) =>\n  !post ? null : (\n    <Column>\n      <Link to={post.slug}>{post.title}</Link>\n      <PostDate>{post.date}</PostDate>\n    </Column>\n  );\n\nconst PostDate = styled(\"p\")({\n  fontSize: 10\n});\n\nexport default Post;\n","import * as React from \"react\";\nimport { Link } from \"gatsby\";\nimport List from \"./List\";\nimport Post from \"./Post\";\nimport Column from \"./Column\";\n\ninterface Props {\n  posts: Array<Object>;\n}\n\nconst PostList = ({ posts }) => (\n  <Column>\n    {posts.map(post => (\n      <Post key={post.slug} post={post} />\n    ))}\n  </Column>\n);\n\nexport default PostList;\n","export { default as Layout } from \"./Layout\";\nexport { default as Anchor } from \"./Anchor\";\nexport { default as Header } from \"./Header\";\nexport { default as Title } from \"./Title\";\nexport { default as Divider } from \"./Divider\";\nexport { default as Description } from \"./Description\";\nexport { default as Post } from \"./Post\";\nexport { default as PostList } from \"./PostList\";\n"],"sourceRoot":""}