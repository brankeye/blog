{"version":3,"sources":["webpack:///./src/templates/post.tsx","webpack:///./src/utils/selectors/index.tsx","webpack:///./src/utils/theme.tsx","webpack:///./src/utils/typography.tsx","webpack:///./src/components/Layout.tsx","webpack:///./src/components/Anchor.tsx","webpack:///./src/components/Header.tsx","webpack:///./src/components/Title.tsx","webpack:///./src/components/Divider.tsx","webpack:///./src/components/Description.tsx","webpack:///./src/components/Column.tsx","webpack:///./src/components/Post.tsx","webpack:///./src/components/PostList.tsx","webpack:///./src/components/index.tsx"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react_emotion__WEBPACK_IMPORTED_MODULE_1__","gatsby__WEBPACK_IMPORTED_MODULE_2__","react_helmet__WEBPACK_IMPORTED_MODULE_3__","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","n","_components__WEBPACK_IMPORTED_MODULE_4__","_utils_selectors__WEBPACK_IMPORTED_MODULE_5__","ramda__WEBPACK_IMPORTED_MODULE_6__","props","title","getTitle","post","path","postTitle","author","getAuthor","twitter","getTwitter","direction","justifyContent","a","HeaderLink","to","noUnderline","dangerouslySetInnerHTML","__html","html","styled","Link","target","textDecoration","boxShadow","color","getPosts","ramda__WEBPACK_IMPORTED_MODULE_0__","getSiteMetadataProp","curry","propName","input","pipe","filter","getPostDraft","map","getPostTitle","date","getPostDate","toUpperCase","slug","getPostSlug","frontmatterProp","Boolean","brighterColor","getBorder","size","borderLight","border","borderHeavy","breakpoints","xs","sm","md","lg","getMediaQuery","bp","githubTheme","overrideThemeStyles","_ref","options","rhythm","body","backgroundColor","h1","borderBottom","h2","h6","b","strong","hr","blockquote","borderLeft","typography","Typography","Layout","scale","display","flex","marginLeft","marginRight","maxWidth","padding","flexDirection","alignItems","Anchor","fontWeight","bold","Header","fontSize","letterSpacing","textTransform","Title","marginTop","Divider","marginBottom","height","borderColor","defaultProps","Description","react","components_Anchor","href","Column","PostDate","Post","components_Column","gatsby_browser_entry","PostList","posts","components_Post","key","components_Layout","components_Header","components_Title","components_Divider","components_Description","components_PostList"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,8BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAA,KAAAO,EAAAP,EAAA,IAAAQ,EAAAR,EAAA,KAAAS,EAAAT,EAAAU,EAAAF,GAAAG,EAAAX,EAAA,KAAAY,EAAAZ,EAAA,KAAAa,EAAAb,EAAA,KA0CAE,EAAA,iBAAgBY,GACd,IAAMC,EAAQC,YAASF,GACjBG,EAAOC,YAAK,CAAC,OAAQ,kBAAmBJ,GACxCK,EAAYD,YAAK,CAAC,cAAe,SAAUD,GAC3CG,EAASC,YAAUP,GACnBQ,EAAUC,YAAWT,GAC3B,OACET,EAAA,cAACM,EAAA,EAAD,CAAQa,UAAU,SAASC,eAAe,UACxCpB,EAAA,cAACI,EAAAiB,EAAD,CAAQX,MAAOA,IACfV,EAAA,cAACsB,EAAD,CAAYC,GAAG,KACbvB,EAAA,cAACM,EAAA,EAAD,CAAQkB,aAAW,GAAEd,IAEvBV,EAAA,cAACM,EAAA,EAAD,KAAQQ,GACRd,EAAA,qBAAKyB,wBAAyB,CAAEC,OAAQd,EAAKe,QAC7C3B,EAAA,cAACM,EAAA,EAAD,MACAN,EAAA,cAACM,EAAA,EAAD,CAAaS,OAAQA,EAAQE,QAASA,MAK5C,IAAMK,EAAaM,YAAOC,OAAV,CAAAC,OAAA,YAAGF,CAAa,CAC9BG,eAAgB,OAChBC,UAAW,OACXC,MAAO,SAGIlC,EAAS,+CCpEtBJ,EAAAG,EAAAD,EAAA,sBAAAc,IAAAhB,EAAAG,EAAAD,EAAA,sBAAAmB,IAAArB,EAAAG,EAAAD,EAAA,sBAAAqB,IAAAvB,EAAAG,EAAAD,EAAA,sBAAAqC,IAAA,IAAAC,EAAAxC,EAAA,KAGayC,EAAsBC,YAAM,SAACC,EAAUC,GAAX,OACvC1B,YAAK,CAAC,OAAQ,OAAQ,eAAgByB,GAAWC,KAEtC5B,EAAWyB,EAAoB,SAC/BpB,EAAYoB,EAAoB,UAChClB,EAAakB,EAAoB,WACjCF,EAAWM,YACtB3B,YAAK,CAAC,OAAQ,oBAAqB,UACnC4B,YAAO,SAAA7B,GAEL,OADc8B,EAAa9B,KAG7B+B,YAAI,SAAA/B,GAAI,MAAK,CACXF,MAAOkC,EAAahC,GACpBiC,KAAMC,EAAYlC,GAAMmC,cACxBC,KAAMC,EAAYrC,OAIhBsC,EAAkB,SAAAZ,GAAQ,OAAIzB,YAAK,CAAC,OAAQ,cAAeyB,KACpDM,EAAeM,EAAgB,SAC/BJ,EAAcI,EAAgB,QAC9BR,EAAeF,YAC1BU,EAAgB,SAChBC,SAEWF,EAAcpC,YAAK,CAAC,OAAQ,SAAU,4FC5BtCoB,EAAQ,yBACRmB,EAAgB,0BAGvBC,EAAY,SAAAC,GAAI,OAAOA,EAAP,YAAuBF,GAChCG,EAAcF,EAAU,GACxBG,EAASH,EAAU,GACnBI,EAAcJ,EAAU,GAS/BK,EAA2B,CAC/BC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,MAGOC,EAAgB,SAAAC,GAAE,4BAA0BN,EAAYM,GAAtC,OAGzBD,EAAc,MACdA,EAAc,MACdA,EAAc,MACdA,EAAc,MClBpBE,IAAYC,oBAAsB,SAAAC,EAAaC,GAAbD,EAAGE,OAAH,MAA0B,CAC1DC,KAAM,CACJC,gBDd2B,sBCe3BtC,SAEFuC,GAAI,CACFvC,QACAwC,aAAc,QAEhBC,GAAI,CACFzC,QACAwC,aAAclB,GAEhBoB,GAAI,CACF1C,SAEFZ,EAAG,CACDY,MD1BqB,4BC2BrBF,eAAgB,QAElB6C,EAAG,CACD3C,MAAOmB,GAETyB,OAAQ,CACN5C,MAAOmB,GAET0B,GAAI,CACF7C,MAAOmB,GAET2B,WAAY,CACV9C,QACA+C,WAAYvB,KAIhB,IAAMwB,EAAa,IAAIC,IAAWjB,KAGrBI,EAASY,EAAWZ,OC1BlBc,GD2BMF,EAAWG,MC3CjBxD,YAAO,MAAV,CAAAE,OAAA,aAAGF,CACb,CACEyD,QAAS,OACTC,KAAM,EACNC,WAAY,OACZC,YAAa,OACbC,SAAUpB,EAAO,IACjBqB,QAAYrB,EAAO,KAAZ,IAAoBA,EAAO,MAEpC,SAAAF,GAAA,MAAgD,CAC9CwB,cADFxB,EAAGhD,UAEDC,eAFF+C,EAAc/C,eAGZwE,WAHFzB,EAA8ByB,eCJjBC,UALAjE,YAAO,IAAV,CAAAE,OAAA,YAAGF,CAAY,SAAAuC,GAAA,MAA4B,CACrD2B,WADyB3B,EAAG4B,KACT,OAAS,SAC5BhE,eAFyBoC,EAAS3C,YAEJ,OAAS,gBCE1BwE,EAPApE,YAAO,KAAV,CAAAE,OAAA,aAAGF,CAAa,CAC1BqE,SAAU,GACVC,cAAe,EACfC,cAAe,YACf1B,aAAc,SCMD2B,EANDxE,YAAO,KAAV,CAAAE,OAAA,aAAGF,CAAa,CACzBqE,SAAU,GACVI,UAAW,EACX5B,aAAcjB,ICPV8C,EAAU1E,YAAO,KAAV,CAAAE,OAAA,aAAGF,CACd,CACEyE,UAAWhC,EAAO,GAClBkC,aAAclC,EAAO,IAEvB,SAAAF,GAAA,IAAGqC,EAAHrC,EAAGqC,OAAH,MAAiB,CACfjC,gBAAiBnB,EACjBqD,YAAarD,EACboD,YAIJF,EAAQI,aAAe,CACrBF,OAAQ,GAGKF,eCCAK,EAZK,SAAAxC,GAAA,IAAGpD,EAAHoD,EAAGpD,OAAQE,EAAXkD,EAAWlD,QAAX,OAClB2F,EAAA,yCACiBA,EAAA,4BAAS7F,GAD1B,+DAE+B6F,EAAA,yBAF/B,UAGU,IACRA,EAAA,cAACC,EAAD,CAAQC,KAAM7F,EAASO,aAAW,GAAlC,0BAEU,IANZ,2BCHauF,EALAnF,YAAO,MAAV,CAAAE,OAAA,aAAGF,CAAc,CAC3ByD,QAAS,OACTM,cAAe,WCgBXqB,EAAWpF,YAAO,IAAV,CAAAE,OAAA,YAAGF,CAAY,CAC3BqE,SAAU,KAGGgB,EAZF,SAAA9C,GAAA,IAAGvD,EAAHuD,EAAGvD,KAAH,OACVA,EACCgG,EAAA,cAACM,EAAD,KACEN,EAAA,cAACO,EAAA,KAAD,CAAM5F,GAAIX,EAAKoC,MAAOpC,EAAKF,OAC3BkG,EAAA,cAACI,EAAD,KAAWpG,EAAKiC,OAHZ,MCIKuE,SARE,SAAAjD,GAAA,IAAGkD,EAAHlD,EAAGkD,MAAH,OACfT,EAAA,cAACM,EAAD,KACGG,EAAM1E,IAAI,SAAA/B,GAAI,OACbgG,EAAA,cAACU,EAAD,CAAMC,IAAK3G,EAAKoC,KAAMpC,KAAMA,SCblCjB,EAAAG,EAAAD,EAAA,sBAAA2H,IAAA7H,EAAAG,EAAAD,EAAA,sBAAA4H,IAAA9H,EAAAG,EAAAD,EAAA,sBAAA6H,IAAA/H,EAAAG,EAAAD,EAAA,sBAAA8H,IAAAhI,EAAAG,EAAAD,EAAA,sBAAA+H,IAAAjI,EAAAG,EAAAD,EAAA,sBAAAgI","file":"component---src-templates-post-tsx-a55221d9e6528922ccc4.js","sourcesContent":["import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { Link, graphql } from \"gatsby\";\nimport Helmet from \"react-helmet\";\nimport {\n  Layout,\n  Title,\n  Divider,\n  Anchor,\n  Description,\n  Header\n} from \"../components\";\nimport {\n  getTitle,\n  getAuthor,\n  getTwitter,\n  getPosts,\n  getPostTitle,\n  getPostSlug\n} from \"../utils/selectors\";\nimport { path } from \"ramda\";\n\ninterface Props {\n  data: {\n    site: {\n      siteMetadata: {\n        title: string;\n        author: string;\n        twitter: string;\n      };\n    };\n    markdownRemark: {\n      post: {\n        frontmatter: {\n          date: string;\n          title: string;\n        };\n      };\n    };\n  };\n}\n\nexport default (props: Props) => {\n  const title = getTitle(props);\n  const post = path([\"data\", \"markdownRemark\"], props);\n  const postTitle = path([\"frontmatter\", \"title\"], post);\n  const author = getAuthor(props);\n  const twitter = getTwitter(props);\n  return (\n    <Layout direction=\"column\" justifyContent=\"center\">\n      <Helmet title={title} />\n      <HeaderLink to=\"/\">\n        <Header noUnderline>{title}</Header>\n      </HeaderLink>\n      <Title>{postTitle}</Title>\n      <div dangerouslySetInnerHTML={{ __html: post.html }} />\n      <Divider />\n      <Description author={author} twitter={twitter} />\n    </Layout>\n  );\n};\n\nconst HeaderLink = styled(Link)({\n  textDecoration: \"none\",\n  boxShadow: \"none\",\n  color: \"#fff\"\n});\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n        twitter\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n      }\n    }\n  }\n`;\n","import { pipe, prop, path, filter, map, curry } from \"ramda\";\nimport { getMonth, getYear } from \"date-fns\";\n\nexport const getSiteMetadataProp = curry((propName, input) =>\n  path([\"data\", \"site\", \"siteMetadata\", propName], input)\n);\nexport const getTitle = getSiteMetadataProp(\"title\");\nexport const getAuthor = getSiteMetadataProp(\"author\");\nexport const getTwitter = getSiteMetadataProp(\"twitter\");\nexport const getPosts = pipe(\n  path([\"data\", \"allMarkdownRemark\", \"edges\"]),\n  filter(post => {\n    const draft = getPostDraft(post);\n    return !draft;\n  }),\n  map(post => ({\n    title: getPostTitle(post),\n    date: getPostDate(post).toUpperCase(),\n    slug: getPostSlug(post)\n  }))\n);\n\nconst frontmatterProp = propName => path([\"node\", \"frontmatter\", propName]);\nexport const getPostTitle = frontmatterProp(\"title\");\nexport const getPostDate = frontmatterProp(\"date\");\nexport const getPostDraft = pipe(\n  frontmatterProp(\"draft\"),\n  Boolean\n);\nexport const getPostSlug = path([\"node\", \"fields\", \"slug\"]);\n","export const backgroundColor = \"hsla(0, 0%, 18%, 1)\";\nexport const color = \"hsla(0, 0%, 95%, 0.95)\";\nexport const brighterColor = \"hsla(0, 0%, 100%, 0.95)\";\nexport const linkColor = \"hsla(195, 90%, 60%, 0.95)\";\n\nconst getBorder = size => `${size}px solid ${brighterColor}`;\nexport const borderLight = getBorder(1);\nexport const border = getBorder(2);\nexport const borderHeavy = getBorder(3);\n\ninterface Breakpoints {\n  xs: number;\n  sm: number;\n  md: number;\n  lg: number;\n}\n\nconst breakpoints: Breakpoints = {\n  xs: 576,\n  sm: 768,\n  md: 992,\n  lg: 1200\n};\n\nexport const getMediaQuery = bp => `@media (min-width: ${breakpoints[bp]}px)`;\n\nexport const mq = {\n  xs: getMediaQuery(\"xs\"),\n  sm: getMediaQuery(\"sm\"),\n  md: getMediaQuery(\"md\"),\n  lg: getMediaQuery(\"lg\")\n};\n","import Typography from \"typography\";\nimport githubTheme from \"typography-theme-github\";\nimport {\n  backgroundColor,\n  color,\n  brighterColor,\n  linkColor,\n  border,\n  borderLight,\n  borderHeavy\n} from \"./theme\";\n\ngithubTheme.overrideThemeStyles = ({ rhythm }, options) => ({\n  body: {\n    backgroundColor,\n    color\n  },\n  h1: {\n    color,\n    borderBottom: \"none\"\n  },\n  h2: {\n    color,\n    borderBottom: borderLight\n  },\n  h6: {\n    color\n  },\n  a: {\n    color: linkColor,\n    textDecoration: \"none\"\n  },\n  b: {\n    color: brighterColor\n  },\n  strong: {\n    color: brighterColor\n  },\n  hr: {\n    color: brighterColor\n  },\n  blockquote: {\n    color,\n    borderLeft: borderHeavy\n  }\n});\n\nconst typography = new Typography(githubTheme);\n\nexport default typography;\nexport const rhythm = typography.rhythm;\nexport const scale = typography.scale;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils/typography\";\n\ninterface Props {\n  children: any;\n}\n\nconst Layout = styled(\"div\")(\n  {\n    display: \"flex\",\n    flex: 1,\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    maxWidth: rhythm(30),\n    padding: `${rhythm(1.5)} ${rhythm(0.75)}`\n  },\n  ({ direction, justifyContent, alignItems }) => ({\n    flexDirection: direction,\n    justifyContent,\n    alignItems\n  })\n);\n\nexport default Layout;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils/typography\";\n\ninterface Props {\n  children: any;\n}\n\nconst Anchor = styled(\"a\")(({ bold, noUnderline }) => ({\n  fontWeight: bold ? \"bold\" : \"normal\",\n  textDecoration: noUnderline ? \"none\" : \"underline\"\n}));\n\nexport default Anchor;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils/typography\";\nimport { mq } from \"../utils/theme\";\n\nconst Header = styled(\"h1\")({\n  fontSize: 20,\n  letterSpacing: 3,\n  textTransform: \"uppercase\",\n  borderBottom: \"none\"\n});\n\nexport default Header;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils/typography\";\nimport { border } from \"../utils/theme\";\n\ninterface Props {\n  children: any;\n}\n\nconst Title = styled(\"h1\")({\n  fontSize: 16,\n  marginTop: 0,\n  borderBottom: border\n});\n\nexport default Title;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils\";\nimport { brighterColor } from \"../utils/theme\";\n\nconst Divider = styled(\"hr\")(\n  {\n    marginTop: rhythm(1),\n    marginBottom: rhythm(1)\n  },\n  ({ height }) => ({\n    backgroundColor: brighterColor,\n    borderColor: brighterColor,\n    height\n  })\n);\n\nDivider.defaultProps = {\n  height: 4\n};\n\nexport default Divider;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils/typography\";\nimport Anchor from \"./Anchor\";\n\ninterface Props {\n  author: string;\n  twitter: string;\n}\n\nconst Description = ({ author, twitter }: Props) => (\n  <p>\n    A tech blog by <strong>{author}</strong> in which he neither publishes\n    nightly nor plays the bugle. <br />\n    You can{\" \"}\n    <Anchor href={twitter} noUnderline>\n      yell at him on Twitter\n    </Anchor>{\" \"}\n    if you'd like.\n  </p>\n);\n\nexport default Description;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\n\nconst Column = styled(\"div\")({\n  display: \"flex\",\n  flexDirection: \"column\"\n});\n\nexport default Column;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { Link } from \"gatsby\";\nimport Column from './Column';\n\ninterface Props {\n  post: {\n    title: string;\n    date: string;\n    slug: string;\n  };\n}\n\nconst Post = ({ post }: Props) =>\n  !post ? null : (\n    <Column>\n      <Link to={post.slug}>{post.title}</Link>\n      <PostDate>{post.date}</PostDate>\n    </Column>\n  );\n\nconst PostDate = styled(\"p\")({\n  fontSize: 10\n});\n\nexport default Post;\n","import * as React from \"react\";\nimport { Link } from \"gatsby\";\nimport List from \"./List\";\nimport Post from \"./Post\";\nimport Column from \"./Column\";\n\ninterface Props {\n  posts: Array<Object>;\n}\n\nconst PostList = ({ posts }) => (\n  <Column>\n    {posts.map(post => (\n      <Post key={post.slug} post={post} />\n    ))}\n  </Column>\n);\n\nexport default PostList;\n","export { default as Layout } from \"./Layout\";\nexport { default as Anchor } from \"./Anchor\";\nexport { default as Header } from \"./Header\";\nexport { default as Title } from \"./Title\";\nexport { default as Divider } from \"./Divider\";\nexport { default as Description } from \"./Description\";\nexport { default as Post } from \"./Post\";\nexport { default as PostList } from \"./PostList\";\n"],"sourceRoot":""}