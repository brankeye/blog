{"version":3,"sources":["webpack:///./src/templates/post.tsx","webpack:///./src/utils/selectors/index.tsx","webpack:///./src/utils/theme.tsx","webpack:///./src/utils/typography.tsx","webpack:///./src/components/Layout.tsx","webpack:///./src/components/Anchor.tsx","webpack:///./src/components/Header.tsx","webpack:///./src/components/Title.tsx","webpack:///./src/components/Divider.tsx","webpack:///./src/components/Description.tsx","webpack:///./src/components/index.tsx"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","gatsby__WEBPACK_IMPORTED_MODULE_1__","react_helmet__WEBPACK_IMPORTED_MODULE_2__","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","n","_components__WEBPACK_IMPORTED_MODULE_3__","_utils_selectors__WEBPACK_IMPORTED_MODULE_4__","ramda__WEBPACK_IMPORTED_MODULE_5__","props","title","getTitle","post","path","postTitle","author","getAuthor","twitter","getTwitter","direction","justifyContent","a","to","style","textDecoration","boxShadow","color","noUnderline","dangerouslySetInnerHTML","__html","html","getPosts","getPostTitle","getPostDate","getPostSlug","ramda__WEBPACK_IMPORTED_MODULE_0__","getSiteMetadataProp","curry","propName","input","brighterColor","getBorder","size","borderLight","border","borderHeavy","breakpoints","xs","sm","md","lg","getMediaQuery","bp","githubTheme","overrideThemeStyles","_ref","options","rhythm","body","backgroundColor","h1","borderBottom","h2","h6","b","strong","hr","blockquote","borderLeft","typography","Typography","Layout","scale","styled","target","display","flex","marginLeft","marginRight","maxWidth","padding","flexDirection","alignItems","Anchor","fontWeight","bold","Header","letterSpacing","textTransform","Title","Divider","marginTop","marginBottom","height","borderColor","defaultProps","Description","react","components_Anchor","href","components_Layout","components_Header","components_Title","components_Divider","components_Description"],"mappings":"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","file":"component---src-templates-post-tsx-bd5d8ea22898dc73cc4c.js","sourcesContent":["import * as React from \"react\";\nimport { Link, graphql } from \"gatsby\";\nimport Helmet from \"react-helmet\";\nimport {\n  Layout,\n  Title,\n  Divider,\n  Anchor,\n  Description,\n  Header\n} from \"../components\";\nimport {\n  getTitle,\n  getAuthor,\n  getTwitter,\n  getPosts,\n  getPostTitle,\n  getPostSlug\n} from \"../utils/selectors\";\nimport { path } from \"ramda\";\n\ninterface Props {\n  data: {\n    site: {\n      siteMetadata: {\n        title: string;\n        author: string;\n        twitter: string;\n      };\n    };\n    markdownRemark: {\n      post: {\n        frontmatter: {\n          date: string;\n          title: string;\n        };\n      };\n    };\n  };\n}\n\nexport default (props: Props) => {\n  const title = getTitle(props);\n  const post = path([\"data\", \"markdownRemark\"], props);\n  const postTitle = path([\"frontmatter\", \"title\"], post);\n  const author = getAuthor(props);\n  const twitter = getTwitter(props);\n  return (\n    <Layout direction=\"column\" justifyContent=\"center\">\n      <Helmet title={title} />\n      <Link\n        to=\"/\"\n        style={{\n          textDecoration: \"none\",\n          boxShadow: \"none\",\n          color: \"#fff\"\n        }}\n      >\n        <Header noUnderline>{title}!</Header>\n      </Link>\n      <Title>{postTitle}</Title>\n      <div dangerouslySetInnerHTML={{ __html: post.html }} />\n      <Divider />\n      <Description author={author} twitter={twitter} />\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n        twitter\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n      }\n    }\n  }\n`;\n","import { prop, path, filter, map, curry, groupBy } from \"ramda\";\nimport { getMonth, getYear } from \"date-fns\";\n\nexport const getSiteMetadataProp = curry((propName, input) =>\n  path([\"data\", \"site\", \"siteMetadata\", propName], input)\n);\nexport const getTitle = getSiteMetadataProp(\"title\");\nexport const getAuthor = getSiteMetadataProp(\"author\");\nexport const getTwitter = getSiteMetadataProp(\"twitter\");\nexport const getPosts = path([\"data\", \"allMarkdownRemark\", \"edges\"]);\nexport const getPostTitle = path([\"node\", \"frontmatter\", \"title\"]);\nexport const getPostDate = path([\"node\", \"frontmatter\", \"date\"]);\nexport const getPostSlug = path([\"node\", \"fields\", \"slug\"]);\n","export const backgroundColor = \"hsla(0, 0%, 18%, 1)\";\nexport const color = \"hsla(0, 0%, 95%, 0.95)\";\nexport const brighterColor = \"hsla(0, 0%, 100%, 0.95)\";\nexport const linkColor = \"hsla(195, 90%, 60%, 0.95)\";\n\nconst getBorder = size => `${size}px solid ${brighterColor}`;\nexport const borderLight = getBorder(1);\nexport const border = getBorder(2);\nexport const borderHeavy = getBorder(3);\n\ninterface Breakpoints {\n  xs: number;\n  sm: number;\n  md: number;\n  lg: number;\n}\n\nconst breakpoints: Breakpoints = {\n  xs: 576,\n  sm: 768,\n  md: 992,\n  lg: 1200\n};\n\nexport const getMediaQuery = bp => `@media (min-width: ${breakpoints[bp]}px)`;\n\nexport const mq = {\n  xs: getMediaQuery(\"xs\"),\n  sm: getMediaQuery(\"sm\"),\n  md: getMediaQuery(\"md\"),\n  lg: getMediaQuery(\"lg\")\n};\n","import Typography from \"typography\";\nimport githubTheme from \"typography-theme-github\";\nimport {\n  backgroundColor,\n  color,\n  brighterColor,\n  linkColor,\n  border,\n  borderLight,\n  borderHeavy\n} from \"./theme\";\n\ngithubTheme.overrideThemeStyles = ({ rhythm }, options) => ({\n  body: {\n    backgroundColor,\n    color\n  },\n  h1: {\n    color,\n    borderBottom: \"none\"\n  },\n  h2: {\n    color,\n    borderBottom: borderLight\n  },\n  h6: {\n    color\n  },\n  a: {\n    color: linkColor,\n    textDecoration: \"none\"\n  },\n  b: {\n    color: brighterColor\n  },\n  strong: {\n    color: brighterColor\n  },\n  hr: {\n    color: brighterColor\n  },\n  blockquote: {\n    color,\n    borderLeft: borderHeavy\n  }\n});\n\nconst typography = new Typography(githubTheme);\n\nexport default typography;\nexport const rhythm = typography.rhythm;\nexport const scale = typography.scale;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils/typography\";\n\ninterface Props {\n  children: any;\n}\n\nconst Layout = styled(\"div\")(\n  {\n    display: \"flex\",\n    flex: 1,\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    maxWidth: rhythm(30),\n    padding: `${rhythm(1.5)} ${rhythm(0.75)}`\n  },\n  ({ direction, justifyContent, alignItems }) => ({\n    flexDirection: direction,\n    justifyContent,\n    alignItems\n  })\n);\n\nexport default Layout;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils/typography\";\n\ninterface Props {\n  children: any;\n}\n\nconst Anchor = styled(\"a\")(({ bold, noUnderline }) => ({\n  fontWeight: bold ? \"bold\" : \"normal\",\n  textDecoration: noUnderline ? \"none\" : \"underline\"\n}));\n\nexport default Anchor;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils/typography\";\nimport { mq } from \"../utils/theme\";\n\nconst Header = styled(\"h1\")({\n  letterSpacing: 5,\n  textTransform: \"uppercase\",\n  borderBottom: \"none\"\n});\n\nexport default Header;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils/typography\";\nimport { border } from \"../utils/theme\";\n\ninterface Props {\n  children: any;\n}\n\nconst Title = styled(\"h1\")({\n  borderBottom: border\n});\n\nexport default Title;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils\";\nimport { brighterColor } from \"../utils/theme\";\n\nconst Divider = styled(\"hr\")(\n  {\n    marginTop: rhythm(1),\n    marginBottom: rhythm(1)\n  },\n  ({ height }) => ({\n    backgroundColor: brighterColor,\n    borderColor: brighterColor,\n    height\n  })\n);\n\nDivider.defaultProps = {\n  height: 4\n};\n\nexport default Divider;\n","import * as React from \"react\";\nimport styled from \"react-emotion\";\nimport { rhythm } from \"../utils/typography\";\nimport Anchor from \"./Anchor\";\n\ninterface Props {\n  author: string;\n  twitter: string;\n}\n\nconst Description = ({ author, twitter }: Props) => (\n  <p>\n    A tech blog by <strong>{author}</strong> in which he neither publishes\n    nightly nor plays the bugle. <br />\n    You can{\" \"}\n    <Anchor href={twitter} noUnderline>\n      yell at him on Twitter\n    </Anchor>{\" \"}\n    if you'd like.\n  </p>\n);\n\nexport default Description;\n","export { default as Layout } from \"./Layout\";\nexport { default as Anchor } from \"./Anchor\";\nexport { default as Header } from \"./Header\";\nexport { default as Title } from \"./Title\";\nexport { default as Divider } from \"./Divider\";\nexport { default as Description } from \"./Description\";\n"],"sourceRoot":""}